/**
 * Structured Library
 * @param {object} $ object reference
 */
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD (Register as an anonymous module)
        define(['jquery', 'sfun'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS
        module.exports = factory(require('jquery'), require('sfun'));
    } else {
        // Browser globals
        factory(jQuery, sfun);
    }
}(function ($, sfun) {

    sfun.api_coreExtend({

        // ------------------
        // FUNCTIONS: Binding
        // ------------------

        /**
         * process events generated by mouse wheel/trackpad scrolling
         */
        'bindToScroll': function () {
            var that = this;
            if (this.bindToScroll_static == undefined) {
                this.$window.scroll(function (event) {
                    var sx = that.$document.scrollLeft(), sy = that.$document.scrollTop();
                    that.handlerScrolled(event, sx, sy);
                    event.preventDefault();
                });
                this.$window.mousewheel(function (event) {
                    that.handlerMouseWheeled(event);
                });
                // guess at the likely existence of a trackpad/magic mouse
                if (this.likely_fluidScroll) {
                    // turn off imagesnap
                    this.imagesnap = this.exp.imageSnapOff;
                }
                // flag that we've attached our listeners
                this.bindToScroll_static = true;
            }
        },

        /**
         * turn header links into clickable buttons
         */
        'bindToHeaderLinks': function () {
            var that = this;
            // fade out header, then setup hover listeners
            $('.header').css('opacity', 0.5).mouseenter(function (event) {
                // animate header open to full screen width
                $(this).stop(true, false).animate({width: '100%', opacity: 1.0}, {
                    complete: function () {
                        $(this).addClass('open');
                    }
                }, 100);
                event.preventDefault();
            }).mouseleave(function (event) {
                // leave header up for 2s, then collapse back down
                $(this).stop(true, false).delay(2000).animate({width: '3em', opacity: 0.5}, {
                    start: function () {
                        $(this).removeClass('open');
                    }
                }, 100);
            });
            // add touchstart event (not click) to open/close menu on mobile devices (without mouseenter/leave)
            $('.header').on({
                'touchstart': function () {
                    if ($(this).hasClass('open')) {
                        // close open header menu
                        $(this).stop(true, false).animate({width: '3em', opacity: 0.5}, {
                            start: function () {
                                $(this).removeClass('open');
                            }
                        }, 100);
                    } else {
                        // open menu
                        $(this).stop(true, false).animate({width: '100%', opacity: 1.0}, {
                            complete: function () {
                                $(this).addClass('open');
                            }
                        }, 100);
                    }
                }
            });
            // horizontal or vertical layout
            $('#flow-x').click(function (event) {
                that.fireTrackEvent('header_x');
                that.fireHashUpdate({'direction': 'x'}, false);
                event.preventDefault();
            });
            $('#flow-y').click(function (event) {
                that.fireTrackEvent('header_y');
                that.fireHashUpdate({'direction': 'y'}, false);
                event.preventDefault();
            });
            // light or dark theme
            $('#theme-light').click(function (event) {
                that.fireTrackEvent('header_light');
                that.fireHashUpdate({'theme': 'theme-light'}, false);
                event.preventDefault();
            });
            $('#theme-dark').click(function (event) {
                that.fireTrackEvent('header_dark');
                that.fireHashUpdate({'theme': 'theme-dark'}, false);
                event.preventDefault();
            });
            // 1x, 2x, 4x, or 8x
            $('#flow-1').click(function (event) {
                that.fireTrackEvent('header_1');
                that.fireHashUpdate({'breadth': 1}, false);
                event.preventDefault();
            });
            $('#flow-2').click(function (event) {
                that.fireTrackEvent('header_2');
                that.fireHashUpdate({'breadth': 2}, false);
                event.preventDefault();
            });
            $('#flow-4').click(function (event) {
                that.fireTrackEvent('header_4');
                that.fireHashUpdate({'breadth': 4}, false);
                event.preventDefault();
            });
            $('#flow-8').click(function (event) {
                that.fireTrackEvent('header_8');
                that.fireHashUpdate({'breadth': 8}, false);
                event.preventDefault();
            });

        },

        /**
         * Bind to hotkeys for navigation
         */
        'bindToHotKeys': function () {
            var that = this;
            this.$document.keydown(function (event) {
                that.handlerKeyPressed(event);
            });
        },

        /**
         * listen for changes to the hash
         * see https://github.com/browserstate/history.js
         */
        'bindToHashChange': function () {
            var that = this;
            // bind to the hash change (not state hashes)
            History.Adapter.bind(window, 'anchorchange', function (event) {
                event.preventDefault();
                that.handlerHashChanged(that.getHash());
            });
        },

        /**
         *  if the image is clicked, redirect to in-page image
         *  based on http://stackoverflow.com/questions/2420970/how-can-i-get-selector-from-jquery-object
         */
        'bindToImageLinks': function () {
            var that = this;
            // bind to click using delegated event handler (http://api.jQuery.com/on/), instead of individual N handlers
            this.$sfun.on('click', '.selectablecell a.media-container', function (event) {
                // find out which element was clicked using node name and first class only
                var selector = event.target.nodeName.toLowerCase();
                if (event.target.classList.length > 0) {
                    selector += '.' + event.target.classList[0];
                }
                // use parent cell to find seq
                var $ent = $(this).parents('.selectablecell');
                that.handlerImageClicked(event, $ent, selector);
            });
        },

        /**
         * if a directory is clicked, append current visual state to new URL
         */
        'bindToDirectoryLinks': function () {
            var that = this;
            this.$sfun.on('click', '.selectablecell a.directory-container', function (event) {
                // detect ctrl down
                if (event.ctrlKey) {
                    // just allow the browser to process the click normally (pop a new tab)
                    return true;
                } else {
                    // interrupt the click and manually process
                    var url = that.urlDirectoryWithState($(this).attr('href'));
                    event.preventDefault();
                    // manually jump to new URL
                    that.urlGoto(url);
                }
            });
        },

        /**
         * if a user hovers over an image, select it
         * currently turned off
         */
        'bindToHover': function () {
            var that = this;
            this.$sfun.on('mouseenter', '.selectablecell a.container', function (event) {
                // be very careful with code in here as :hover is a very frequent event
                var seq = $(this).parent().data('seq');
                // work out image and viewport's positions on major axis
                var offseq = that.imageStillShiftOffseq(seq);
                // select image using hash update
                that.fireHashUpdate({'seq': seq, 'offseq': offseq}, false);
                // optional debugging
                if (that.debug && true) {
                    console.log('hover over img-' + seq);
                }
            });
        },

        /**
         * if a user hovers over a video, use relative position to change thumbnail
         * currently turned off
         */
        'bindToVideoHover': function () {
            var that = this;
            // be very careful with code in here as :hover is a very frequent event
            this.$sfun.on('mousemove', '.selectablecell a.video-container', function (event) {
                // pull ent using shared cached copy
                var $ent = that.$cell($(this).parent().data('seq'));
                // work out image and cursor positions on x axis (always)
                var image_pos = $ent.offset();
                var cursor_pos = event.pageX - image_pos.left;
                var meta = $ent.cachedGet('metadata');
                if (meta != undefined) {
                    // calculate frame to request (grouped by partitions)
                    // var partitions = 20;
                    // var cursor_part = this.exp.api_round(cursor_pos * partitions / $ent.width(), 0);
                    // var cursor_frame = this.exp.api_round(cursor_part * meta.dv_framecount / partitions, 0);
                    // calculate frame to request
                    var cursor_frame = that.exp.api_round(cursor_pos * meta.dv_framecount / $ent.width(), 0);
                    // check to see if we're already displaying this frame
                    if ($ent.data('frame') == cursor_frame) {
                        // do nothing
                    } else {
                        // tag cell as displaying this frame
                        $ent.data('frame', cursor_frame);
                        // find image
                        var $loadable = $ent.cachedFind('> .container > .loadable');
                        if ($loadable.hasClass('frame_pending')) {
                            // do nothing
                        } else {
                            // just change out the img src; no res/ratio changes
                            var highres = that.substitute($loadable.data('template-src'), {
                                'maxwidth': that.last_longest,
                                'maxheight': that.last_longest,
                                'timecode': 'f' + cursor_frame
                            });
                            var im = new Image();
                            im.onload = im.onerror = function () {
                                // re-enable frame loading
                                $loadable.removeClass('frame_pending');
                                $loadable.attr('src', highres);
                            }
                            im.src = highres;
                            $loadable.addClass('frame_pending')
                            // optional debugging
                            if (that.debug && true) {
                                console.log(cursor_frame + ' of ' + meta.dv_framecount);
                            }
                        }
                    }
                }
            });
        },

    })

}));
